import static java.time.LocalDateTime.now
import static java.time.ZoneOffset.UTC
import static java.time.format.DateTimeFormatter.ISO_DATE_TIME

plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'checkstyle'
    id 'jacoco'
}

group projectGroup
version projectVersion

sourceCompatibility = 12
targetCompatibility = 12

ext {
    javaVersion = '12'
    lombokVersion = '1.18.10'
    logbackVersion = '1.2.3'
    vertxVersion = '3.8.4'
    junitVersion = '5.5.2'
    gitHash = "git rev-parse HEAD".execute().text.trim()
    gitBranch = "git rev-parse --abbrev-ref HEAD".execute().text.trim()
    currentJvm = "${System.getProperty("java.version")} (${System.getProperty("java.vendor")})"
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
    implementation group: 'ch.qos.logback', name: 'logback-core', version: logbackVersion
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
    implementation group: 'io.vertx', name: 'vertx-core', version: vertxVersion
    implementation group: 'io.vertx', name: 'vertx-web', version: vertxVersion
    implementation group: 'io.vertx', name: 'vertx-web-api-contract', version: vertxVersion
    implementation group: 'io.vertx', name: 'vertx-jdbc-client', version: vertxVersion
    implementation group: 'com.h2database', name: 'h2', version: '1.4.200'
    implementation group: 'org.liquibase', name: 'liquibase-core', version: '3.8.5'
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.25'

    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: junitVersion
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.2.4'
    testImplementation group: 'io.vertx', name: 'vertx-junit5', version: vertxVersion
    testImplementation group: 'io.vertx', name: 'vertx-web-client', version: vertxVersion
}

checkstyle {
    toolVersion '8.28'
    maxWarnings 0
}

test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
}

jacoco {
    toolVersion = '0.8.5'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.75
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled true
    }
}

assemble.dependsOn jacocoTestReport

application {
    mainClassName = 'io.vertx.core.Launcher'
}

run {
    args = ['run', 'us.vanderlugt.sample.vertx.MainVerticle',
            '--launcher-class=io.vertx.core.Launcher',
            '--redeploy=src/**/*.*', '--on-redeploy=./gradlew classes']
}

jar {
    manifest {
        attributes(
                'Main-Class': application.mainClassName,
                'Main-Verticle': 'us.vanderlugt.sample.vertx.MainVerticle',
                'Application-Name': project.name,
                'Created-By': project.currentJvm,
                'Implementation-Title': project.applicationTitle,
                'Implementation-Version': project.version,
                'Build-Hash': project.gitHash,
                'Build-Branch': project.gitBranch,
                'Build-Time': ISO_DATE_TIME.format(now().atZone(UTC))
        )
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}